#+title: Parsing Tidal

* Introduction: =parse= and =convertToPattern=
Notes on the structure + function TidalParser.  TidalParser is an artificially created class generated by Cursor AI (https://www.cursor.com).  The parser itself (method =parse=) seems to be working fine.  The conversion to SuperCollider objects (method =convertToPattern=) is practically useless.  An sclang engine that emulates TidalCycles more faithfully is needed.  The purpose of the present notes is to help in creating a full emulation of TidalCycles in SuperCollider.

An additional benefit of TidalParser is that it implements a summary of the Tidal Cycles syntax.  It is thus very helpful in building a compact overview of the functionalities of TidalCycles.  The summary is coded in methods =parsePattern= and =convertToPattern=.  =parsePattern= shows the types of patterns that are recognized by the parser, while =convertToPattern= shows what kind of structure each type of pattern corresponds to, or in other words, what each type of pattern does in TidalCycles.

* =parsePattern=

=parsePattern= defines following character-pattern type pairs:

Of these only [ ] seems correct.  ??? marks indicate how the other characters' meaning should be further investigated.

- [ (and ]) :: =PATTERN_SEQUENCE= (*tokenList*, =parseList=).
- < (and >) :: =PATTERN_PARALLEL= (??? Is this what <> does? Study it!!!).
- . :: =PATTERN_TRANSFORM= ???  . is used as a separator of metric units!
- / :: =PATTERN_EUCLIDEAN= ??? Actually the syntax is (a, b).
- ~ :: =PATTERN_MODULATION= ??? ~ is used as a sign for pause
- * :: =PATTERN_OPERATION= ??? * is used as a sign for repetition

MISSING:
- ! :: Repetition in a different way than =*=.

Overall there are 6 types of patterns:

1. sequence [...]
2. parallel <...> N.B. Interleaving - not exactly parallel.
3. transform <pattern>.<transform method> N.B. separator between pattern subunits.
4. euclidean /  N.B.
5. modulation ~ N.B. pause
6. operation * N.B. repetition within one metric unit for all repeated elements.

And a 7th pattern operator:

7. repetition ! N.B. repetition taking one metric unit per single repetition.

The function of each each of the above types of patterns can be partially be guessed by the

Overview of patterns:

** sequence pattern

A sequence of elements, fitted into a Tidal Cycle (!)

** parallel pattern

Parallel elements? How? Test!

** transform pattern

transform the receiver pattern by an operation named by the message sent to it

: <pattern>.<transformType>

What transform types exist?

** euclidean /

What is the syntax and function of the euclidean pattern?

** modulation ~

What types of modulation exist?

** operation *

What is the syntax, and what kinds of operations exist?
